generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String     @id @default(uuid())
  title      String
  content    String?
  published  Boolean    @default(true)
  authorId   String
  createdAt  DateTime   @default(now())
  categoryId String
  hashtags   String
  isDeleted  Boolean    @default(false)
  slug       String     @unique
  views      Int        @default(0)
  comments   Comment[]
  author     User       @relation(fields: [authorId], references: [id])
  category   Category   @relation(fields: [categoryId], references: [id])
  reactions  Reaction[]
  canRepost  Boolean    @default(false)
  parentId   String?
  parent     Post?      @relation("Reposts", fields: [parentId], references: [id])
  children   Post[]     @relation("Reposts")

  @@index([views])
  @@index([published, isDeleted])
  @@index([title, hashtags, content])
  @@map("posts")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  posts     Post[]

  @@index([name])
  @@index([isDeleted])
  @@map("categories")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  nickname        String
  password        String
  createdAt       DateTime   @default(now())
  isEnable        Boolean    @default(true)
  isEmailVerified Boolean    @default(false)
  isDeleted       Boolean    @default(false)
  bio             String?
  comments        Comment[]
  posts           Post[]
  reactions       Reaction[]
  followers       Follower[] @relation("Followers")
  followings      Follower[] @relation("Followings")

  @@index([nickname])
  @@index([isDeleted])
  @@map("users")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  reacts    Int      @default(0)
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@index([text])
  @@map("comments")
}

model Reaction {
  id       String @id @default(uuid())
  type     String
  postId   String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  post     Post   @relation(fields: [postId], references: [id])

  @@index([type])
  @@map("reactions")
}

model Follower {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  followerId  String
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("Followings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("followers")
}
